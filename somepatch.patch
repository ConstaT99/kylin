diff --git a/core-common/src/main/java/org/apache/kylin/common/KylinConfig.java b/core-common/src/main/java/org/apache/kylin/common/KylinConfig.java
index de5c16bfe..66f69bfef 100644
--- a/core-common/src/main/java/org/apache/kylin/common/KylinConfig.java
+++ b/core-common/src/main/java/org/apache/kylin/common/KylinConfig.java
@@ -46,6 +46,8 @@ import java.util.Collection;
 import java.util.Map;
 import java.util.Properties;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.Set;
+import java.util.Iterator;
 
 import org.apache.kylin.shaded.com.google.common.base.Strings;
 import org.apache.kylin.shaded.com.google.common.base.Preconditions;
@@ -160,6 +162,15 @@ public class KylinConfig extends KylinConfigBase {
                     logger.info("Initialized a new KylinConfig from getInstanceFromEnv : "
                             + System.identityHashCode(config));
                     SYS_ENV_INSTANCE = config;
+
+//                    Set<String> names = config.properties.stringPropertyNames(); // ctest
+//                    Iterator<String> namesIterator = names.iterator(); // ctest
+//                    int j = 0;// cetst
+//                    while (namesIterator.hasNext()){ // ctest
+//                        logger.warn("[CTEST][GET-PARAM]" + namesIterator.next() + j);// ctest
+//                        j++;
+//                    }// ctest
+
                 } catch (IllegalArgumentException e) {
                     throw new IllegalStateException("Failed to find KylinConfig ", e);
                 }
@@ -186,20 +197,20 @@ public class KylinConfig extends KylinConfigBase {
 
         //uncomment below to start debugging
 
-        //        Thread t = Thread.currentThread();
-        //        int maxStackTraceDepth = 20;
-        //        int current = 0;
-        //
-        //        StackTraceElement[] stackTrace = t.getStackTrace();
-        //        StringBuilder buf = new StringBuilder("This is not a exception, just for diagnose purpose:");
-        //        buf.append("\n");
-        //        for (StackTraceElement e : stackTrace) {
-        //            if (++current > maxStackTraceDepth) {
-        //                break;
-        //            }
-        //            buf.append("\t").append("at ").append(e.toString()).append("\n");
-        //        }
-        //        logger.info(buf.toString());
+//                Thread t = Thread.currentThread();
+//                int maxStackTraceDepth = 20;
+//                int current = 0;
+//
+//                StackTraceElement[] stackTrace = t.getStackTrace();
+//                StringBuilder buf = new StringBuilder("This is not a exception, just for diagnose purpose:");
+//                buf.append("\n");
+//                for (StackTraceElement e : stackTrace) {
+//                    if (++current > maxStackTraceDepth) {
+//                        break;
+//                    }
+//                    buf.append("\t").append("at ").append(e.toString()).append("\n");
+//                }
+//                logger.info(buf.toString());
     }
 
     public enum UriType {
@@ -438,8 +449,16 @@ public class KylinConfig extends KylinConfigBase {
             OrderedProperties temp = new OrderedProperties();
             temp.load(confReader);
             temp = BCC.check(temp);
-
             properties.putAll(temp);
+
+//            Set<String> names = properties.stringPropertyNames(); // ctest
+//            Iterator<String> namesIterator = names.iterator(); // ctest
+//            int j = 0;// cetst
+//            while (namesIterator.hasNext()){ // ctest
+//                logger.warn("[CTEST][GET-PARAM]" + namesIterator.next() + j);// ctest
+//                j++;
+//            }// ctest
+
         } catch (Exception e) {
             throw new RuntimeException(e);
         }
diff --git a/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java b/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
index 0c22c0d94..86f4ed28b 100644
--- a/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
+++ b/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java
@@ -28,6 +28,8 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Set;
+import java.util.Iterator;
 import java.util.Map.Entry;
 import java.util.Properties;
 import java.util.SortedSet;
@@ -180,6 +182,20 @@ public abstract class KylinConfigBase implements Serializable {
     protected String getOptional(String prop, String dft) {
 
         final String property = System.getProperty(prop);
+        /*
+        * begin ctest
+        * */
+        String res;
+        if(property != null){
+            res = getSubstitutor().replace(property, System.getenv());
+        }else{
+            res = getSubstitutor().replace(properties.getProperty(prop, dft), System.getenv());
+        }
+
+        logger.warn("[CTEST][GET-PARAM] " + prop + ' '+ res );//ctest
+        /*
+        * end ctest
+        * */
         return property != null ? getSubstitutor().replace(property, System.getenv())
                 : getSubstitutor().replace(properties.getProperty(prop, dft), System.getenv());
     }
@@ -201,6 +217,15 @@ public abstract class KylinConfigBase implements Serializable {
                 filteredProperties.put(entry.getKey(), sub.replace((String) entry.getValue()));
             }
         }
+        if( propertyKeys != null){
+            Set<String> names = filteredProperties.stringPropertyNames(); // ctest
+            Iterator<String> namesIterator = names.iterator(); // ctest
+            int i = 0; //ctest
+            while (namesIterator.hasNext()){ // ctest
+                logger.warn("[CTEST][GET-PARAM]" + namesIterator.next() + " index: " + i);// ctest
+                i ++; // ctest
+            }// ctest
+        }
         return filteredProperties;
     }
 
@@ -222,6 +247,7 @@ public abstract class KylinConfigBase implements Serializable {
         for (Entry<Object, Object> entry : getAllProperties().entrySet()) {
             String key = (String) entry.getKey();
             if (key.startsWith(prefix)) {
+                logger.warn("[CTEST][GET-PARAM]: " + key);//ctest
                 result.put(key.substring(prefix.length()), (String) entry.getValue());
             }
         }
@@ -258,7 +284,7 @@ public abstract class KylinConfigBase implements Serializable {
      * Use with care, properties should be read-only. This is for testing only.
      */
     final public void setProperty(String key, String value) {
-        logger.info("Kylin Config was updated with {} : {}", key, value);
+        logger.info("[CTEST][SET-PARAM]: Kylin Config was updated with {} : {}", key, value);// Ctest
         properties.setProperty(BCC.check(key), value);
     }
 
